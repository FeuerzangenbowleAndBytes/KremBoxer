Search.setIndex({"titles": ["API", "kremboxer.greybody_utils.GB_lambda", "kremboxer.greybody_utils.GB_lambda_window", "kremboxer.greybody_utils.GB_ratio", "kremboxer.greybody_utils.GB_ratio_BP", "kremboxer.greybody_utils.detector_model", "kremboxer.greybody_utils.detector_temperature_lookup", "kremboxer.greybody_utils.planck_model", "kremboxer.greybody_utils.stefan_boltzmann", "kremboxer.krembox_dualband_cleaner.Path", "kremboxer.krembox_dualband_cleaner.Path.__bytes__", "kremboxer.krembox_dualband_cleaner.Path.__eq__", "kremboxer.krembox_dualband_cleaner.Path.__ge__", "kremboxer.krembox_dualband_cleaner.Path.__gt__", "kremboxer.krembox_dualband_cleaner.Path.__hash__", "kremboxer.krembox_dualband_cleaner.Path.__le__", "kremboxer.krembox_dualband_cleaner.Path.__lt__", "kremboxer.krembox_dualband_cleaner.Path.__new__", "kremboxer.krembox_dualband_cleaner.Path.__reduce__", "kremboxer.krembox_dualband_cleaner.Path.__repr__", "kremboxer.krembox_dualband_cleaner.Path.__str__", "kremboxer.krembox_dualband_cleaner.Path.absolute", "kremboxer.krembox_dualband_cleaner.Path.anchor", "kremboxer.krembox_dualband_cleaner.Path.as_posix", "kremboxer.krembox_dualband_cleaner.Path.as_uri", "kremboxer.krembox_dualband_cleaner.Path.chmod", "kremboxer.krembox_dualband_cleaner.Path.cwd", "kremboxer.krembox_dualband_cleaner.Path.drive", "kremboxer.krembox_dualband_cleaner.Path.exists", "kremboxer.krembox_dualband_cleaner.Path.expanduser", "kremboxer.krembox_dualband_cleaner.Path.glob", "kremboxer.krembox_dualband_cleaner.Path.group", "kremboxer.krembox_dualband_cleaner.Path.home", "kremboxer.krembox_dualband_cleaner.Path.is_absolute", "kremboxer.krembox_dualband_cleaner.Path.is_block_device", "kremboxer.krembox_dualband_cleaner.Path.is_char_device", "kremboxer.krembox_dualband_cleaner.Path.is_dir", "kremboxer.krembox_dualband_cleaner.Path.is_fifo", "kremboxer.krembox_dualband_cleaner.Path.is_file", "kremboxer.krembox_dualband_cleaner.Path.is_mount", "kremboxer.krembox_dualband_cleaner.Path.is_reserved", "kremboxer.krembox_dualband_cleaner.Path.is_socket", "kremboxer.krembox_dualband_cleaner.Path.is_symlink", "kremboxer.krembox_dualband_cleaner.Path.iterdir", "kremboxer.krembox_dualband_cleaner.Path.joinpath", "kremboxer.krembox_dualband_cleaner.Path.lchmod", "kremboxer.krembox_dualband_cleaner.Path.link_to", "kremboxer.krembox_dualband_cleaner.Path.lstat", "kremboxer.krembox_dualband_cleaner.Path.match", "kremboxer.krembox_dualband_cleaner.Path.mkdir", "kremboxer.krembox_dualband_cleaner.Path.name", "kremboxer.krembox_dualband_cleaner.Path.open", "kremboxer.krembox_dualband_cleaner.Path.owner", "kremboxer.krembox_dualband_cleaner.Path.parent", "kremboxer.krembox_dualband_cleaner.Path.parents", "kremboxer.krembox_dualband_cleaner.Path.parts", "kremboxer.krembox_dualband_cleaner.Path.read_bytes", "kremboxer.krembox_dualband_cleaner.Path.read_text", "kremboxer.krembox_dualband_cleaner.Path.relative_to", "kremboxer.krembox_dualband_cleaner.Path.rename", "kremboxer.krembox_dualband_cleaner.Path.replace", "kremboxer.krembox_dualband_cleaner.Path.resolve", "kremboxer.krembox_dualband_cleaner.Path.rglob", "kremboxer.krembox_dualband_cleaner.Path.rmdir", "kremboxer.krembox_dualband_cleaner.Path.root", "kremboxer.krembox_dualband_cleaner.Path.samefile", "kremboxer.krembox_dualband_cleaner.Path.stat", "kremboxer.krembox_dualband_cleaner.Path.stem", "kremboxer.krembox_dualband_cleaner.Path.suffix", "kremboxer.krembox_dualband_cleaner.Path.suffixes", "kremboxer.krembox_dualband_cleaner.Path.symlink_to", "kremboxer.krembox_dualband_cleaner.Path.touch", "kremboxer.krembox_dualband_cleaner.Path.unlink", "kremboxer.krembox_dualband_cleaner.Path.with_name", "kremboxer.krembox_dualband_cleaner.Path.with_suffix", "kremboxer.krembox_dualband_cleaner.Path.write_bytes", "kremboxer.krembox_dualband_cleaner.Path.write_text", "kremboxer.krembox_dualband_cleaner.process_data_series", "kremboxer.krembox_dualband_cleaner.run_krembox_dualband_cleaner", "kremboxer.krembox_dualband_frp.compute_FRP", "kremboxer.krembox_dualband_frp.load_calibration_data", "kremboxer.krembox_dualband_frp.run_krembox_dualband_frp", "kremboxer.krembox_dualband_utils.associate_data2burnplot", "kremboxer.krembox_dualband_utils.parse_header", "kremboxer.krembox_dualband_utils.plot_osceola_statistics", "kremboxer.krembox_dualband_utils.plot_processed_dualband_data", "kremboxer.krembox_dualband_vis.Camera", "kremboxer.krembox_dualband_vis.Camera.__init__", "kremboxer.krembox_dualband_vis.Camera.animate", "kremboxer.krembox_dualband_vis.Camera.snap", "kremboxer.krembox_dualband_vis.animate_burn_unit", "kremboxer.krembox_dualband_vis.plot_burn_unit", "kremboxer.krembox_dualband_vis.plot_burn_unit_map", "kremboxer.krembox_dualband_vis.run_krembox_dualband_vis", "kremboxer.krembox_utils.get_signal_bounds", "kremboxer.kremboxer.main", "Burn Units Data", "Documentation", "Welcome to KremBoxer\u2019s documentation!", "Methods", "Usage"], "terms": {"planck_model": [0, 7], "t": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 21, 71, 99], "A": [0, 5, 7, 9, 54, 69, 99], "n": [0, 5, 7], "comput": [0, 1, 3, 4, 7, 8, 79, 84, 94, 95, 98, 99], "polynomi": [0, 7], "approxim": [0, 7, 99], "planck": [0, 7, 99], "curv": [0, 7], "detector_model": [0, 5], "g": [0, 5], "al": [0, 5], "td": [0, 5, 6], "model": [0, 5, 7, 80, 99], "detector": [0, 4, 5, 80, 98, 99], "respons": [0, 5, 98], "when": [0, 5], "view": [0, 5, 99], "an": [0, 1, 2, 5, 9, 21, 55, 74, 99], "object": [0, 1, 2, 3, 4, 5, 8, 9, 17, 51, 55, 59, 60, 99], "temperatur": [0, 1, 2, 3, 4, 5, 6, 7, 8, 79, 80, 98, 99], "": [0, 5, 9, 32, 45, 47, 54, 68, 69, 94, 99], "i": [0, 5, 9, 10, 17, 21, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 58, 65, 70, 72, 74, 96, 97, 98, 99], "gb_lambda": [0, 1], "lam": [0, 1], "emiss": [0, 1, 2, 8, 79, 99], "1": [0, 1, 2, 8, 9, 51, 99], "greybodi": [0, 1, 8, 99], "radiat": [0, 1, 8, 99], "emit": [0, 1, 8, 99], "gb_lambda_window": [0, 2], "lam1": [0, 2, 3], "lam2": [0, 2, 3], "integr": [0, 2, 3, 4, 94, 99], "radianc": [0, 1, 2, 3, 4, 8, 99], "over": [0, 2, 9, 30, 43, 99], "specifi": [0, 2, 78, 94], "wavelength": [0, 1, 2, 3, 4, 99], "gb_ratio": [0, 3], "lam3": [0, 3], "lam4": [0, 3], "ratio": [0, 3, 4], "two": [0, 3, 4, 99], "window": [0, 2, 3, 4, 9, 61, 98], "gb_ratio_bp": [0, 4], "f1": [0, 4], "f2": [0, 4], "account": [0, 4], "bandbass": [0, 4], "stefan_boltzmann": [0, 8], "total": [0, 8, 9, 44, 94, 99], "via": [0, 8, 96], "stefan": [0, 8], "boltzmann": [0, 8, 99], "law": [0, 8], "detector_temperature_lookup": [0, 6], "r": [0, 6, 9, 51], "convert": [0, 6], "resist": [0, 6], "read": [0, 6, 9, 56, 57], "measur": [0, 6, 90, 99], "get_signal_bound": [0, 94], "data": [0, 9, 75, 76, 78, 79, 80, 91, 94, 98, 99], "arrai": [0, 1, 94], "p_start": [0, 94], "indic": [0, 94], "ind_start": [0, 94], "ind_end": [0, 94], "contain": [0, 9, 40, 94], "percentag": [0, 94], "signal": [0, 94], "weight": [0, 94], "ie": [0, 94], "occur": [0, 94, 96], "befor": [0, 94], "p_end": [0, 94], "parse_head": [0, 83], "field": [0, 83, 99], "header": [0, 83], "paramet": [0, 1, 2, 3, 4, 5, 6, 7, 8, 77, 78, 80, 81, 82, 83, 84, 85, 92, 94, 95, 96], "return": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 23, 24, 26, 29, 31, 32, 40, 44, 47, 48, 51, 52, 58, 59, 60, 65, 66, 73, 74, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95], "associate_data2burnplot": [0, 82], "rad_data_gdf": [0, 82, 84, 90, 91], "burn_plot_gdf": [0, 82, 90, 91, 92], "plot_processed_dualband_data": [0, 85], "rad_df": [0, 85], "plot_outfil": [0, 85], "show_plot": [0, 84, 85, 91, 92], "dt_start": [0, 85], "dt_end": [0, 85], "sup_titl": [0, 85], "plot_osceola_statist": [0, 84], "gdf": [0, 84], "make": [0, 9, 46, 61, 70, 84, 86, 92, 97], "plot": [0, 84, 91, 92], "statist": [0, 84], "from": [0, 9, 17, 74, 78, 84, 86, 87, 90, 95, 98, 99, 100], "all": [0, 9, 21, 30, 44, 61, 62, 78, 84, 92, 95, 98, 99], "osceola": [0, 84, 98], "frp": [0, 79, 84, 90, 95, 98, 99], "dataset": [0, 78, 84, 96, 98], "ex": [0, 84, 95], "fire": [0, 79, 84, 99], "durat": [0, 84], "max": [0, 84], "v": [0, 84], "treatment": [0, 84], "note": [0, 9, 46, 70, 84, 98, 99], "thi": [0, 9, 10, 21, 28, 30, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 48, 49, 51, 54, 58, 59, 60, 62, 63, 65, 66, 68, 70, 71, 72, 84, 95, 96, 97, 98, 99], "onli": [0, 9, 10, 78, 84, 98, 99], "work": [0, 9, 21, 26, 59, 60, 84, 98, 99], "becaus": [0, 9, 58, 84, 98], "special": [0, 9, 40, 43, 84], "associ": [0, 84, 91], "between": [0, 84, 94], "burn": [0, 84, 90, 91, 92, 98], "unit": [0, 84, 90, 91, 92, 98, 99], "process_data_seri": [0, 77], "data_seri": [0, 77], "target_d": [0, 77], "file": [0, 9, 21, 24, 30, 31, 38, 43, 51, 52, 56, 57, 62, 65, 71, 72, 73, 74, 75, 76, 77, 95, 96, 97, 98], "data_directori": [0, 77], "clean_file_list": [0, 77], "run_krembox_dualband_clean": [0, 78], "clean": [0, 78, 96, 97], "raw": [0, 78, 80, 99], "datafil": [0, 78], "store": [0, 78], "directori": [0, 9, 26, 30, 32, 36, 43, 49, 59, 60, 62, 63, 72, 78, 97, 100], "keep": [0, 78], "target": [0, 9, 45, 46, 47, 59, 60, 70, 78, 79, 99], "date": [0, 78], "load_calibration_data": [0, 80], "cal_param": [0, 80], "load": [0, 80], "calibr": [0, 80, 95, 98, 99], "need": [0, 80, 97, 98], "process": [0, 80, 96, 99], "includ": [0, 9, 30, 62, 68, 69, 80, 98], "bandpass": [0, 4, 80, 98, 99], "sensor": [0, 6, 80, 98, 99], "look": [0, 80], "up": [0, 80], "tabl": [0, 6, 80], "compute_frp": [0, 79], "rad_data": [0, 79], "datafram": [0, 78, 79, 85], "us": [0, 9, 10, 21, 72, 79, 88, 96, 97, 98, 99], "dualband": [0, 79, 95, 98, 99], "area": [0, 79, 99], "product": [0, 79], "pass": [0, 9, 20, 58, 79, 95], "under": [0, 9, 10, 61, 79], "param": [0, 78, 79, 81, 90, 91, 93], "f_mw": [0, 79, 80], "f_lw": [0, 79, 80], "model_param": [0, 79, 80], "detect_temp_cal_data": [0, 79, 80], "run_krembox_dualband_frp": [0, 81], "animate_burn_unit": [0, 90], "anim": [0, 86, 88, 90], "time": [0, 90, 99], "trace": [0, 90, 99], "each": [0, 90, 96, 99], "radiomet": [0, 90, 96, 98], "burn_unit": [0, 90, 91], "plot_output_dir": [0, 84, 90, 91, 92], "plot_title_prefix": [0, 90, 91, 92], "plot_burn_unit": [0, 91], "given": [0, 1, 3, 9, 30, 48, 49, 62, 71, 74, 91, 99], "whether": [0, 9, 28, 34, 35, 36, 37, 38, 41, 42, 65, 91], "show": [0, 91], "dure": [0, 91, 98], "code": [0, 91, 95, 98, 99, 100], "execut": [0, 91], "plot_burn_unit_map": [0, 92], "simpl": [0, 92, 99], "run_krembox_dualband_vi": [0, 93], "vis_param": [0, 93], "run": [0, 93, 96, 97, 100], "visual": [0, 93], "main": [0, 95], "argv": [0, 95], "user": [0, 9, 29, 32, 95], "entri": [0, 95], "point": [0, 9, 21, 26, 32, 38, 39, 45, 46, 47, 51, 59, 60, 70, 95], "part": [0, 9, 55, 95], "can": [0, 9, 95, 96, 97, 99], "launch": [0, 95], "provid": [0, 9, 55, 95, 96], "script": [0, 95], "json": [0, 95, 96], "command": [0, 95], "line": [0, 95], "argument": [0, 9, 44, 46, 58, 70, 95], "krembox": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100], "greybody_util": [1, 2, 3, 4, 5, 6, 7, 8, 98], "which": [1, 9, 17, 94, 99], "default": 1, "lower": [2, 3], "bound": [2, 3], "upper": [2, 3], "float": [2, 8, 94], "first": [3, 4], "second": [3, 4], "being": 5, "fit": [5, 7], "coeffici": [5, 7], "tempratur": 5, "power": [5, 7, 99], "temp_cal_data": 6, "ohm": 6, "lookup": 6, "translat": 6, "column": 6, "ar": [6, 9, 17, 44, 45, 59, 60, 99], "celciu": 6, "kelvin": [6, 7], "valu": [7, 9, 11, 12, 13, 15, 16], "type": [7, 88], "f": [7, 99], "class": [9, 86], "krembox_dualband_clean": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 98], "path": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 85, 90, 91, 92, 98], "pathlib": 9, "purepath": [9, 17], "subclass": 9, "system": [9, 20, 40, 66, 95], "call": [9, 20, 66], "repres": [9, 44], "filesystem": [9, 55], "unlik": 9, "also": [9, 38, 61, 99], "offer": 9, "method": [9, 98], "do": [9, 97], "depend": [9, 99, 100], "your": [9, 97, 100], "instanti": 9, "either": [9, 44], "posixpath": 9, "windowspath": 9, "you": [9, 97], "directli": 9, "cannot": 9, "posix": [9, 39], "vice": 9, "versa": 9, "static": [9, 17], "cl": [9, 17], "arg": [9, 17, 44, 86, 88], "kwarg": [9, 17, 86, 88], "construct": [9, 17, 29], "one": [9, 17, 40, 44, 98], "sever": [9, 17, 44], "string": [9, 17, 20, 23, 74, 96], "exist": [9, 17, 28, 30, 60, 62, 71], "The": [9, 17, 22, 27, 46, 50, 53, 59, 60, 63, 64, 67, 68, 96, 97, 98, 99], "combin": [9, 17, 44], "so": [9, 17, 98, 99], "yield": [9, 17, 30, 43, 62], "canonic": [9, 17], "incorpor": [9, 17], "new": [9, 17, 26, 29, 32, 44, 49, 59, 60, 73, 74, 98, 100], "classmethod": [9, 26, 32], "cwd": [9, 26], "current": [9, 26, 59, 60, 86, 89], "o": [9, 25, 26, 29, 32, 46, 65, 66, 70, 98], "getcwd": [9, 26], "home": [9, 32], "expandus": [9, 29, 32], "samefil": [9, 65], "other_path": [9, 65], "same": [9, 65], "iterdir": [9, 43], "iter": [9, 30, 43], "doe": [9, 43, 46, 51, 66, 99], "ani": [9, 27, 30, 40, 43, 50, 62, 64, 68, 69, 97, 98], "result": [9, 43, 66, 99], "glob": [9, 30], "pattern": [9, 30, 48, 62], "subtre": [9, 30, 62], "kind": [9, 30, 62], "match": [9, 30, 46, 48, 62, 96], "rel": [9, 30, 44, 58, 59, 60, 62], "rglob": [9, 62], "recurs": [9, 62], "anywher": [9, 62], "absolut": [9, 21, 33, 59, 60, 61], "version": [9, 21], "function": [9, 21, 46, 51, 99], "even": [9, 21], "doesn": [9, 21, 71], "anyth": [9, 21], "resolv": [9, 21, 61], "strict": [9, 61], "fals": [9, 49, 61, 70, 72], "symlink": [9, 38, 45, 47, 61, 70], "wai": [9, 61, 97], "normal": [9, 21, 61], "exampl": [9, 61, 68, 69], "turn": [9, 61], "slash": [9, 23, 61], "backslash": [9, 61], "stat": [9, 47, 66], "like": [9, 25, 45, 47, 55, 66], "owner": [9, 52], "login": [9, 52], "name": [9, 31, 40, 46, 50, 52, 73], "group": [9, 31], "gid": [9, 31], "open": [9, 51, 56, 57, 75, 76, 97], "mode": [9, 25, 45, 49, 51, 56, 57, 71, 75, 76], "buffer": [9, 51], "encod": [9, 51, 57, 76], "none": [9, 51, 57, 76, 92], "error": [9, 51, 57, 76], "built": [9, 51, 97], "read_byt": [9, 56], "byte": [9, 10, 56, 75], "close": [9, 56, 57, 75, 76], "read_text": [9, 57], "text": [9, 57, 76], "write_byt": [9, 75], "write": [9, 75, 76], "write_text": [9, 76], "touch": [9, 71], "438": [9, 71], "exist_ok": [9, 49, 71], "true": [9, 33, 38, 40, 48, 71, 84, 91, 92], "creat": [9, 49, 71, 86, 87], "access": [9, 55, 71], "mkdir": [9, 49], "511": [9, 49], "parent": [9, 49, 53, 54], "chmod": [9, 25, 45], "chang": [9, 25, 45, 73, 74, 97], "permiss": [9, 25, 45], "lchmod": [9, 45], "except": [9, 45, 47], "rather": [9, 45, 47], "than": [9, 45, 47], "its": [9, 45, 47, 67], "unlink": [9, 72], "missing_ok": [9, 72], "remov": [9, 63, 72, 74], "link": [9, 42, 46, 70, 72], "If": [9, 58, 72, 74, 97], "rmdir": [9, 63, 72], "instead": [9, 72], "must": [9, 63, 96, 99], "empti": [9, 63, 74], "lstat": [9, 47], "statu": [9, 47], "inform": [9, 47, 78], "renam": [9, 59, 60], "replac": [9, 60], "overwrit": [9, 60], "symlink_to": [9, 46, 70], "target_is_directori": [9, 70], "order": [9, 46, 70, 99], "revers": [9, 46, 70], "link_to": [9, 46], "hard": [9, 46], "is_dir": [9, 36], "is_fil": [9, 38], "regular": [9, 38], "is_mount": [9, 39], "check": [9, 39, 98], "mount": [9, 39], "is_symlink": [9, 42], "symbol": [9, 42], "is_block_devic": [9, 34], "block": [9, 34], "devic": [9, 34, 35, 99], "is_char_devic": [9, 35], "charact": [9, 35], "is_fifo": [9, 37], "fifo": [9, 37], "is_socket": [9, 41], "socket": [9, 41], "expand": [9, 29], "__reduce__": [9, 18], "helper": [9, 18], "pickl": [9, 18], "__str__": [9, 20], "represent": [9, 10, 20, 23], "suitabl": [9, 20], "as_posix": [9, 23], "forward": [9, 23], "__bytes__": [9, 10], "recommend": [9, 10], "unix": [9, 10], "__repr__": [9, 19], "repr": [9, 19], "self": [9, 11, 12, 13, 14, 15, 16, 19], "as_uri": [9, 24], "uri": [9, 24], "__eq__": [9, 11], "other": [9, 11, 12, 13, 15, 16, 58], "__hash__": [9, 14], "hash": [9, 14], "__lt__": [9, 16], "__le__": [9, 15], "__gt__": [9, 13], "__ge__": [9, 12], "properti": [9, 22, 27, 50, 53, 54, 55, 64, 67, 68, 69, 96], "drive": [9, 22, 27, 33], "prefix": [9, 27], "letter": [9, 27], "unc": [9, 27], "root": [9, 22, 33, 64], "anchor": [9, 22, 44], "concaten": [9, 22], "final": [9, 50, 67, 68, 69], "compon": [9, 50, 55, 67, 68, 69], "suffix": [9, 67, 68, 69, 74], "last": [9, 67, 68], "list": [9, 69, 86, 89], "stem": [9, 67], "minu": [9, 67], "with_nam": [9, 73], "with_suffix": [9, 74], "ha": [9, 33, 74, 94, 98, 99], "add": [9, 74], "relative_to": [9, 58], "anoth": [9, 58], "identifi": [9, 58], "oper": [9, 58], "possibl": [9, 58], "subpath": [9, 44, 58], "rais": [9, 58], "valueerror": [9, 58], "sequenc": [9, 54, 55], "joinpath": [9, 44], "differ": [9, 44], "logic": [9, 53, 54], "is_absolut": [9, 33], "both": [9, 33], "applic": [9, 33], "is_reserv": [9, 40], "reserv": [9, 40], "path_pattern": [9, 48], "No": 21, "done": 21, "e": [21, 99], "kept": 21, "along": 21, "get": [21, 99], "canon": 21, "despit": 46, "implic": 46, "newlin": 51, "mai": [59, 60, 99], "interpret": [59, 60], "instanc": [59, 60], "lead": [68, 69], "period": [68, 69], "For": [68, 69], "txt": 68, "These": 69, "tar": 69, "gz": 69, "dict": [78, 79, 81, 93], "geopanda": [78, 100], "krembox_dualband_frp": [79, 80, 81, 98], "dictionari": 80, "krembox_dualband_util": [82, 83, 84, 85, 98], "geodatafram": [82, 84, 90, 91, 92], "bool": [84, 85, 91, 92], "datetim": [85, 100], "str": [85, 92], "krembox_dualband_vi": [86, 87, 88, 89, 90, 91, 92, 93, 98], "camera": [86, 87, 88, 89], "easier": 86, "figur": [86, 87, 89], "matplotlib": [86, 87, 88, 100], "snap": [86, 89], "artist": [86, 89], "captur": [86, 89], "state": [86, 89], "artistanim": [86, 88], "snapshot": [86, 88], "taken": [86, 88], "color_column": 92, "rad_data_df": 92, "krembox_util": [94, 98], "One": [94, 97], "dimension": 94, "want": 94, "posit": 94, "where": [94, 99], "integ": 94, "python": [95, 97, 98, 100], "m": [95, 99, 100], "p": 95, "paramfil": 95, "example_paramfil": 95, "Will": 95, "pars": 95, "extract": 95, "geojson": 96, "describ": [96, 99], "determin": 96, "option": 96, "data_cleaner_paramet": 96, "burn_plot_dataframe_input": 96, "actual": [96, 99], "step": 96, "have": [96, 98], "follow": [96, 98, 100], "geometri": 96, "attribut": 96, "polygon": 96, "uniqu": 96, "id": 96, "3": 98, "perform": 98, "gather": 98, "more": 98, "now": [97, 98], "here": 98, "quick": 98, "start": 98, "guid": 98, "far": 98, "been": 98, "test": 98, "ubuntu": 98, "principl": 98, "should": [97, 98], "mac": 98, "too": 98, "we": [98, 99], "might": 98, "just": [98, 99], "through": [98, 99], "some": [98, 99], "specif": 98, "issu": 98, "repo": [98, 100], "blackbodi": [98, 99], "bob": 98, "calibration_data": 98, "valid": 98, "fort": 98, "stewart": 98, "2022": 98, "prescrib": 98, "11": 98, "case": [98, 99], "appli": [98, 99], "believ": 98, "adequ": 98, "seen": 98, "nearli": 98, "ideent": 98, "howev": 98, "shortcut": 98, "batch": 98, "usag": 98, "instal": [97, 98], "api": 98, "krembox_dualband_calibr": 98, "public": 98, "member": 98, "instruct": 100, "clone": 100, "github": 100, "setup": 100, "virtual": [97, 100], "environ": [97, 100], "requir": [97, 100], "choos": 100, "cd": 100, "git": 100, "http": 100, "com": 100, "feuerzangenbowleandbyt": 100, "python3": 100, "venv": [97, 100], "python_venv": 100, "activ": [97, 100], "sourc": [97, 100], "bin": [97, 100], "pip": [97, 100], "numpi": 100, "scipi": 100, "panda": 100, "celluloid": 100, "sphinx": 97, "doc": 97, "org": [], "edit": 97, "rst": 97, "rebuild": 97, "To": 97, "html": 97, "theme": 97, "sphinx_rtd_them": 97, "sphinx_immateri": 97, "browser": 97, "see": 97, "navig": 97, "build": 97, "index": 97, "_": [], "transport": [], "physic": 98, "primari": 99, "purpos": 99, "radi": 99, "page": 99, "algorithm": 99, "involv": 99, "obtain": 99, "estim": 99, "amount": 99, "ir": 99, "observ": 99, "band": 99, "roughli": 99, "6": 99, "um": 99, "8": 99, "14": 99, "equat": 99, "spectral": 99, "b": 99, "lambda": 99, "frac": 99, "2hc": 99, "2": 99, "5": 99, "hc": 99, "k_b": 99, "w": 99, "sr": 99, "cdot": 99, "h": 99, "constant": 99, "c": 99, "speed": 99, "light": 99, "per": 99, "solid": 99, "angl": 99, "strictli": 99, "ideal": 99, "absorb": 99, "incid": 99, "upon": 99, "real": 99, "multipli": 99, "rang": 99, "0": 99, "assum": 99, "epsilon": 99, "gb": 99, "how": 99, "much": 99, "reach": 99, "fov": 99, "detect": 99, "let": 99, "suppos": 99, "cone": 99, "half": 99, "theta_d": 99, "within": 99, "furthermor": 99, "fraction": 99, "occupi": 99, "sinc": 99, "background": 99, "small": 99, "compar": 99, "particular": 99, "int_": 99, "pi": 99, "d": 99, "phi": 99, "co": 99, "theta": 99, "sin": 99, "omega": 99, "parameter": 99, "transmitt": [], "electr": [], "entir": 99, "hemispher": 99, "filter": 99, "int_0": 99, "infti": 99, "were": 99, "perfect": 99, "blockbodi": 99, "cover": 99}, "objects": {"kremboxer.greybody_utils": [[1, 0, 1, "", "GB_lambda", "Compute the greybody radiation emitted by an object at temperature T"], [2, 0, 1, "", "GB_lambda_window", "Integrated radiance of an object at temperature T over specified wavelengths"], [3, 0, 1, "", "GB_ratio", "Compute the ratio of the integrated radiances in two wavelength windows"], [4, 0, 1, "", "GB_ratio_BP", "Compute the ratio of the integrated radiances in two wavelength windows, accounting for bandbass of detector"], [5, 0, 1, "", "detector_model", "Model for the detector response when viewing an object at temperature T and when the detector's temperature is TD"], [6, 0, 1, "", "detector_temperature_lookup", "Converts a resistance reading into a temperature measurement"], [7, 0, 1, "", "planck_model", "Computes a polynomial approximation to the planck curve, A*T^N"], [8, 0, 1, "", "stefan_boltzmann", "Compute the total radiation emitted by a greybody object via Stefan-Boltzmann law"]], "kremboxer.greybody_utils.GB_lambda": [[1, 1, 2, "p-T", "T", "temperature of the object"], [1, 1, 2, "p-emissivity", "emissivity", "emissivity of the object, defaults to 1"], [1, 1, 2, "p-lams", "lams", "wavelengths at which to compute the radiance"]], "kremboxer.greybody_utils.GB_lambda_window": [[2, 1, 2, "p-T", "T", "temperature of object"], [2, 1, 2, "p-emissivity", "emissivity", "emissivity of object"], [2, 1, 2, "p-lam1", "lam1", "lower wavelength bound"], [2, 1, 2, "p-lam2", "lam2", "upper wavelength bound"]], "kremboxer.greybody_utils.GB_ratio": [[3, 1, 2, "p-T", "T", "temperature of object"], [3, 1, 2, "p-lam1", "lam1", "lower bound of first window"], [3, 1, 2, "p-lam2", "lam2", "upper bound of first window"], [3, 1, 2, "p-lam3", "lam3", "lower bound of second window"], [3, 1, 2, "p-lam4", "lam4", "upper bound of second window"]], "kremboxer.greybody_utils.GB_ratio_BP": [[4, 1, 2, "p-F1", "F1", "bandpass of the first window detector"], [4, 1, 2, "p-F2", "F2", "bandpass of the second window detector"], [4, 1, 2, "p-T", "T", "temperature of object"]], "kremboxer.greybody_utils.detector_model": [[5, 1, 2, "p-A", "A", "fit coefficient"], [5, 1, 2, "p-AL", "AL", "fit coefficient"], [5, 1, 2, "p-G", "G", "fit coefficient"], [5, 1, 2, "p-N", "N", "fit power coefficient"], [5, 1, 2, "p-T", "T", "temperature of the object being viewed"], [5, 1, 2, "p-TD", "TD", "temprature of the detector"]], "kremboxer.greybody_utils.detector_temperature_lookup": [[6, 1, 2, "p-R", "R", "Resistance of temperature sensor, Ohms"], [6, 1, 2, "p-temp_cal_data", "temp_cal_data", "Lookup table that translates Resistance readings to temperature measurements. Columns are [T Celcius, T Kelvin, Resistance]"]], "kremboxer.greybody_utils.planck_model": [[7, 1, 2, "p-A", "A", "polynomial fit coefficient"], [7, 1, 2, "p-N", "N", "polynomial fit power coefficient"], [7, 1, 2, "p-T", "T", "temperature (Kelvin)"]], "kremboxer.greybody_utils.stefan_boltzmann": [[8, 1, 2, "p-T", "T", "temperature of object"], [8, 1, 2, "p-emissivity", "emissivity", "emissivity of object"]], "kremboxer.krembox_dualband_cleaner": [[9, 2, 1, "", "Path", "PurePath subclass that can make system calls."], [77, 0, 1, "", "process_data_series", ""], [78, 0, 1, "", "run_krembox_dualband_cleaner", "Cleans the raw datafiles from raw krembox data stored in specified directories.  Only keeps data from the specified target dates"]], "kremboxer.krembox_dualband_cleaner.Path": [[10, 3, 1, "", "__bytes__", "Return the bytes representation of the path.  This is only recommended to use under Unix."], [11, 3, 1, "", "__eq__", "Return self==value."], [12, 3, 1, "", "__ge__", "Return self>=value."], [13, 3, 1, "", "__gt__", "Return self>value."], [14, 3, 1, "", "__hash__", "Return hash(self)."], [15, 3, 1, "", "__le__", "Return self<=value."], [16, 3, 1, "", "__lt__", "Return self<value."], [17, 3, 1, "", "__new__", "Construct a PurePath from one or several strings and or existing PurePath objects.  The strings and path objects are combined so as to yield a canonicalized path, which is incorporated into the new PurePath object."], [18, 3, 1, "", "__reduce__", "Helper for pickle."], [19, 3, 1, "", "__repr__", "Return repr(self)."], [20, 3, 1, "", "__str__", "Return the string representation of the path, suitable for passing to system calls."], [21, 3, 1, "", "absolute", "Return an absolute version of this path.  This function works even if the path doesn't point to anything."], [22, 4, 1, "", "anchor", "The concatenation of the drive and root, or ''."], [23, 3, 1, "", "as_posix", "Return the string representation of the path with forward (/) slashes."], [24, 3, 1, "", "as_uri", "Return the path as a 'file' URI."], [25, 3, 1, "", "chmod", "Change the permissions of the path, like os.chmod()."], [26, 3, 1, "", "cwd", "Return a new path pointing to the current working directory (as returned by os.getcwd())."], [27, 4, 1, "", "drive", "The drive prefix (letter or UNC path), if any."], [28, 3, 1, "", "exists", "Whether this path exists."], [29, 3, 1, "", "expanduser", "Return a new path with expanded ~ and ~user constructs (as returned by os.path.expanduser)"], [30, 3, 1, "", "glob", "Iterate over this subtree and yield all existing files (of any kind, including directories) matching the given relative pattern."], [31, 3, 1, "", "group", "Return the group name of the file gid."], [32, 3, 1, "", "home", "Return a new path pointing to the user's home directory (as returned by os.path.expanduser('~'))."], [33, 3, 1, "", "is_absolute", "True if the path is absolute (has both a root and, if applicable, a drive)."], [34, 3, 1, "", "is_block_device", "Whether this path is a block device."], [35, 3, 1, "", "is_char_device", "Whether this path is a character device."], [36, 3, 1, "", "is_dir", "Whether this path is a directory."], [37, 3, 1, "", "is_fifo", "Whether this path is a FIFO."], [38, 3, 1, "", "is_file", "Whether this path is a regular file (also True for symlinks pointing to regular files)."], [39, 3, 1, "", "is_mount", "Check if this path is a POSIX mount point"], [40, 3, 1, "", "is_reserved", "Return True if the path contains one of the special names reserved by the system, if any."], [41, 3, 1, "", "is_socket", "Whether this path is a socket."], [42, 3, 1, "", "is_symlink", "Whether this path is a symbolic link."], [43, 3, 1, "", "iterdir", "Iterate over the files in this directory.  Does not yield any result for the special paths '.' and '..'."], [44, 3, 1, "", "joinpath", "Combine this path with one or several arguments, and return a new path representing either a subpath (if all arguments are relative paths) or a totally different path (if one of the arguments is anchored)."], [45, 3, 1, "", "lchmod", "Like chmod(), except if the path points to a symlink, the symlink's permissions are changed, rather than its target's."], [46, 3, 1, "", "link_to", "Make the target path a hard link pointing to this path."], [47, 3, 1, "", "lstat", "Like stat(), except if the path points to a symlink, the symlink's status information is returned, rather than its target's."], [48, 3, 1, "", "match", "Return True if this path matches the given pattern."], [49, 3, 1, "", "mkdir", "Create a new directory at this given path."], [50, 4, 1, "", "name", "The final path component, if any."], [51, 3, 1, "", "open", "Open the file pointed by this path and return a file object, as the built-in open() function does."], [52, 3, 1, "", "owner", "Return the login name of the file owner."], [53, 4, 1, "", "parent", "The logical parent of the path."], [54, 4, 1, "", "parents", "A sequence of this path's logical parents."], [55, 4, 1, "", "parts", "An object providing sequence-like access to the components in the filesystem path."], [56, 3, 1, "", "read_bytes", "Open the file in bytes mode, read it, and close the file."], [57, 3, 1, "", "read_text", "Open the file in text mode, read it, and close the file."], [58, 3, 1, "", "relative_to", "Return the relative path to another path identified by the passed arguments.  If the operation is not possible (because this is not a subpath of the other path), raise ValueError."], [59, 3, 1, "", "rename", "Rename this path to the target path."], [60, 3, 1, "", "replace", "Rename this path to the target path, overwriting if that path exists."], [61, 3, 1, "", "resolve", "Make the path absolute, resolving all symlinks on the way and also normalizing it (for example turning slashes into backslashes under Windows)."], [62, 3, 1, "", "rglob", "Recursively yield all existing files (of any kind, including directories) matching the given relative pattern, anywhere in this subtree."], [63, 3, 1, "", "rmdir", "Remove this directory.  The directory must be empty."], [64, 4, 1, "", "root", "The root of the path, if any."], [65, 3, 1, "", "samefile", "Return whether other_path is the same or not as this file (as returned by os.path.samefile())."], [66, 3, 1, "", "stat", "Return the result of the stat() system call on this path, like os.stat() does."], [67, 4, 1, "", "stem", "The final path component, minus its last suffix."], [68, 4, 1, "", "suffix", "The final component's last suffix, if any."], [69, 4, 1, "", "suffixes", "A list of the final component's suffixes, if any."], [70, 3, 1, "", "symlink_to", "Make this path a symlink pointing to the target path. Note the order of arguments (link, target) is the reverse of os.symlink."], [71, 3, 1, "", "touch", "Create this file with the given access mode, if it doesn't exist."], [72, 3, 1, "", "unlink", "Remove this file or link. If the path is a directory, use rmdir() instead."], [73, 3, 1, "", "with_name", "Return a new path with the file name changed."], [74, 3, 1, "", "with_suffix", "Return a new path with the file suffix changed.  If the path has no suffix, add given suffix.  If the given suffix is an empty string, remove the suffix from the path."], [75, 3, 1, "", "write_bytes", "Open the file in bytes mode, write to it, and close the file."], [76, 3, 1, "", "write_text", "Open the file in text mode, write to it, and close the file."]], "kremboxer.krembox_dualband_cleaner.process_data_series": [[77, 1, 2, "p-clean_file_list", "clean_file_list", ""], [77, 1, 2, "p-data_directory", "data_directory", ""], [77, 1, 2, "p-data_series", "data_series", ""], [77, 1, 2, "p-file", "file", ""], [77, 1, 2, "p-target_dates", "target_dates", ""]], "kremboxer.krembox_dualband_cleaner.run_krembox_dualband_cleaner": [[78, 1, 2, "p-params", "params", ""]], "kremboxer.krembox_dualband_frp": [[79, 0, 1, "", "compute_FRP", "Use the dualband data to compute the target temperature, emissivity Area product, and FRP of the fire passing under the krembox :param rad_data: :param F_MW: :param F_LW: :param model_params: :param detect_temp_cal_data: :return:"], [80, 0, 1, "", "load_calibration_data", "Loads the calibration data needed to process the raw KremBox data, including bandpasses, detector model parameters, and temperature sensor look up table"], [81, 0, 1, "", "run_krembox_dualband_frp", ""]], "kremboxer.krembox_dualband_frp.load_calibration_data": [[80, 1, 2, "p-cal_params", "cal_params", "dictionary of calibration parameters"]], "kremboxer.krembox_dualband_frp.run_krembox_dualband_frp": [[81, 1, 2, "p-params", "params", ""]], "kremboxer.krembox_dualband_utils": [[82, 0, 1, "", "associate_data2burnplot", ""], [83, 0, 1, "", "parse_header", ""], [84, 0, 1, "", "plot_osceola_statistics", "Makes a plot with statistics computed from all the Osceola FRP datasets at Osceola, ex: fire duration, max FRP, vs treatment Note that this only works for the Osceola datasets, because of the special association between treatments and burn units"], [85, 0, 1, "", "plot_processed_dualband_data", ""]], "kremboxer.krembox_dualband_utils.associate_data2burnplot": [[82, 1, 2, "p-burn_plot_gdf", "burn_plot_gdf", ""], [82, 1, 2, "p-rad_data_gdf", "rad_data_gdf", ""]], "kremboxer.krembox_dualband_utils.parse_header": [[83, 1, 2, "p-fields", "fields", ""], [83, 1, 2, "p-header", "header", ""]], "kremboxer.krembox_dualband_utils.plot_osceola_statistics": [[84, 1, 2, "p-plot_output_dir", "plot_output_dir", ""], [84, 1, 2, "p-show_plot", "show_plot", ""]], "kremboxer.krembox_dualband_utils.plot_processed_dualband_data": [[85, 1, 2, "p-dt_end", "dt_end", ""], [85, 1, 2, "p-dt_start", "dt_start", ""], [85, 1, 2, "p-plot_outfile", "plot_outfile", ""], [85, 1, 2, "p-rad_df", "rad_df", ""], [85, 1, 2, "p-show_plot", "show_plot", ""], [85, 1, 2, "p-sup_title", "sup_title", ""]], "kremboxer.krembox_dualband_vis": [[86, 2, 1, "", "Camera", "Make animations easier."], [90, 0, 1, "", "animate_burn_unit", "Animate the time traces of the FRP measurements from each radiometer in the burn unit :param rad_data_gdf: :param burn_plot_gdf: :param burn_unit: :param plot_output_dir: :param plot_title_prefix: :return:"], [91, 0, 1, "", "plot_burn_unit", "Plots data associated with a given burn unit :param rad_data_gdf: :param burn_plot_gdf: :param burn_unit: :param plot_output_dir: :param show_plot: whether to show plot during code execution :return:"], [92, 0, 1, "", "plot_burn_unit_map", "Makes a simple plot of all the burn units"], [93, 0, 1, "", "run_krembox_dualband_vis", "Runs visualizer :param vis_params: :return:"]], "kremboxer.krembox_dualband_vis.Camera": [[87, 3, 1, "", "__init__", "Create camera from matplotlib figure."], [88, 3, 1, "", "animate", "Animate the snapshots taken."], [89, 3, 1, "", "snap", "Capture current state of the figure."]], "kremboxer.krembox_dualband_vis.plot_burn_unit_map": [[92, 1, 2, "p-burn_plot_gdf", "burn_plot_gdf", ""], [92, 1, 2, "p-color_column", "color_column", ""], [92, 1, 2, "p-plot_output_dir", "plot_output_dir", ""], [92, 1, 2, "p-plot_title_prefix", "plot_title_prefix", ""], [92, 1, 2, "p-rad_data_df", "rad_data_df", ""], [92, 1, 2, "p-show_plot", "show_plot", ""]], "kremboxer.krembox_utils": [[94, 0, 1, "", "get_signal_bounds", "Compute the indices, ind_start ind_end, containing the specified percentage of the signal's integrated weight.  IE p_start of the signal occurs before ind_start, p_end of the signal occurs before ind_end."]], "kremboxer.krembox_utils.get_signal_bounds": [[94, 1, 2, "p-data", "data", "One dimensional signal data"], [94, 1, 2, "p-p_end", "p_end", "Want position in signal where p_end of the total weight has occurred"], [94, 1, 2, "p-p_start", "p_start", "Want position in signal where p_start of the total weight has occurred"]], "kremboxer.kremboxer": [[95, 0, 1, "", "main", "Main user entry point for the Kremboxer code.  All parts of the dualband calibration and FRP computation can be launched by providing this script with a JSON parameter file as a command line argument"]], "kremboxer.kremboxer.main": [[95, 1, 2, "p-argv", "argv", "Command line parameters passed from the system.  Will be parsed to extract the parameter file."]]}, "objtypes": {"0": "py:function", "1": "py:parameter", "2": "py:class", "3": "py:method", "4": "py:property"}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "parameter", "Python parameter"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"]}, "titleterms": {"api": 0, "greybody_util": 0, "krembox_util": 0, "krembox_dualband_util": 0, "krembox_dualband_calibr": 0, "krembox_dualband_clean": 0, "krembox_dualband_frp": 0, "krembox_dualband_vi": 0, "krembox": [0, 98], "public": [0, 9, 86], "member": [0, 9, 86], "burn": 96, "unit": 96, "data": 96, "document": [97, 98], "welcom": 98, "": 98, "method": 99, "usag": 100, "instal": 100, "physic": 99}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"API": [[0, "api"]], "greybody_utils": [[0, "greybody-utils"]], "krembox_utils": [[0, "krembox-utils"]], "krembox_dualband_utils": [[0, "krembox-dualband-utils"]], "krembox_dualband_calibrate": [[0, "krembox-dualband-calibrate"]], "krembox_dualband_cleaner": [[0, "krembox-dualband-cleaner"]], "krembox_dualband_frp": [[0, "krembox-dualband-frp"]], "krembox_dualband_vis": [[0, "krembox-dualband-vis"]], "kremboxer": [[0, "kremboxer"]], "Public Members": [[0, "public-members"]], "Burn Units Data": [[96, "burn-units-data"]], "Welcome to KremBoxer\u2019s documentation!": [[98, "welcome-to-kremboxer-s-documentation"]], "Usage": [[100, "usage"]], "Installation": [[100, "installation"]], "Documentation": [[97, "documentation"]], "Public members": [[9, "public-members"], [86, "public-members"]], "Methods": [[99, "methods"]], "Physics": [[99, "physics"]]}, "indexentries": {}, "docurls": ["api.html", "api/greybody_utils/GB_lambda.html", "api/greybody_utils/GB_lambda_window.html", "api/greybody_utils/GB_ratio.html", "api/greybody_utils/GB_ratio_BP.html", "api/greybody_utils/detector_model.html", "api/greybody_utils/detector_temperature_lookup.html", "api/greybody_utils/planck_model.html", "api/greybody_utils/stefan_boltzmann.html", "api/krembox_dualband_cleaner/Path.html", "api/krembox_dualband_cleaner/Path.__bytes__.html", "api/krembox_dualband_cleaner/Path.__eq__.html", "api/krembox_dualband_cleaner/Path.__ge__.html", "api/krembox_dualband_cleaner/Path.__gt__.html", "api/krembox_dualband_cleaner/Path.__hash__.html", "api/krembox_dualband_cleaner/Path.__le__.html", "api/krembox_dualband_cleaner/Path.__lt__.html", "api/krembox_dualband_cleaner/Path.__new__.html", "api/krembox_dualband_cleaner/Path.__reduce__.html", "api/krembox_dualband_cleaner/Path.__repr__.html", "api/krembox_dualband_cleaner/Path.__str__.html", "api/krembox_dualband_cleaner/Path.absolute.html", "api/krembox_dualband_cleaner/Path.anchor.html", "api/krembox_dualband_cleaner/Path.as_posix.html", "api/krembox_dualband_cleaner/Path.as_uri.html", "api/krembox_dualband_cleaner/Path.chmod.html", "api/krembox_dualband_cleaner/Path.cwd.html", "api/krembox_dualband_cleaner/Path.drive.html", "api/krembox_dualband_cleaner/Path.exists.html", "api/krembox_dualband_cleaner/Path.expanduser.html", "api/krembox_dualband_cleaner/Path.glob.html", "api/krembox_dualband_cleaner/Path.group.html", "api/krembox_dualband_cleaner/Path.home.html", "api/krembox_dualband_cleaner/Path.is_absolute.html", "api/krembox_dualband_cleaner/Path.is_block_device.html", "api/krembox_dualband_cleaner/Path.is_char_device.html", "api/krembox_dualband_cleaner/Path.is_dir.html", "api/krembox_dualband_cleaner/Path.is_fifo.html", "api/krembox_dualband_cleaner/Path.is_file.html", "api/krembox_dualband_cleaner/Path.is_mount.html", "api/krembox_dualband_cleaner/Path.is_reserved.html", "api/krembox_dualband_cleaner/Path.is_socket.html", "api/krembox_dualband_cleaner/Path.is_symlink.html", "api/krembox_dualband_cleaner/Path.iterdir.html", "api/krembox_dualband_cleaner/Path.joinpath.html", "api/krembox_dualband_cleaner/Path.lchmod.html", "api/krembox_dualband_cleaner/Path.link_to.html", "api/krembox_dualband_cleaner/Path.lstat.html", "api/krembox_dualband_cleaner/Path.match.html", "api/krembox_dualband_cleaner/Path.mkdir.html", "api/krembox_dualband_cleaner/Path.name.html", "api/krembox_dualband_cleaner/Path.open.html", "api/krembox_dualband_cleaner/Path.owner.html", "api/krembox_dualband_cleaner/Path.parent.html", "api/krembox_dualband_cleaner/Path.parents.html", "api/krembox_dualband_cleaner/Path.parts.html", "api/krembox_dualband_cleaner/Path.read_bytes.html", "api/krembox_dualband_cleaner/Path.read_text.html", "api/krembox_dualband_cleaner/Path.relative_to.html", "api/krembox_dualband_cleaner/Path.rename.html", "api/krembox_dualband_cleaner/Path.replace.html", "api/krembox_dualband_cleaner/Path.resolve.html", "api/krembox_dualband_cleaner/Path.rglob.html", "api/krembox_dualband_cleaner/Path.rmdir.html", "api/krembox_dualband_cleaner/Path.root.html", "api/krembox_dualband_cleaner/Path.samefile.html", "api/krembox_dualband_cleaner/Path.stat.html", "api/krembox_dualband_cleaner/Path.stem.html", "api/krembox_dualband_cleaner/Path.suffix.html", "api/krembox_dualband_cleaner/Path.suffixes.html", "api/krembox_dualband_cleaner/Path.symlink_to.html", "api/krembox_dualband_cleaner/Path.touch.html", "api/krembox_dualband_cleaner/Path.unlink.html", "api/krembox_dualband_cleaner/Path.with_name.html", "api/krembox_dualband_cleaner/Path.with_suffix.html", "api/krembox_dualband_cleaner/Path.write_bytes.html", "api/krembox_dualband_cleaner/Path.write_text.html", "api/krembox_dualband_cleaner/process_data_series.html", "api/krembox_dualband_cleaner/run_krembox_dualband_cleaner.html", "api/krembox_dualband_frp/compute_FRP.html", "api/krembox_dualband_frp/load_calibration_data.html", "api/krembox_dualband_frp/run_krembox_dualband_frp.html", "api/krembox_dualband_utils/associate_data2burnplot.html", "api/krembox_dualband_utils/parse_header.html", "api/krembox_dualband_utils/plot_osceola_statistics.html", "api/krembox_dualband_utils/plot_processed_dualband_data.html", "api/krembox_dualband_vis/Camera.html", "api/krembox_dualband_vis/Camera.__init__.html", "api/krembox_dualband_vis/Camera.animate.html", "api/krembox_dualband_vis/Camera.snap.html", "api/krembox_dualband_vis/animate_burn_unit.html", "api/krembox_dualband_vis/plot_burn_unit.html", "api/krembox_dualband_vis/plot_burn_unit_map.html", "api/krembox_dualband_vis/run_krembox_dualband_vis.html", "api/krembox_utils/get_signal_bounds.html", "api/kremboxer/main.html", "burnunits.html", "documentation.html", "index.html", "methods.html", "usage.html"]})